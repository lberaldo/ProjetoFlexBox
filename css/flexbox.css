.cabecalhoPrincipal .container{
    display: flex; /*Deixa um do lado do outro, baseado no elemento pai. */
    align-items: center; /* alinha elementos dentro do flex, no centro. verticalmente. */
    justify-content: space-between; /* coloca o espaço azul que estava sobrando entre os elementos. */
}

.cabecalhoPrincipal-nav{
    display: flex; /*Deixa um elemento do lado do outro. como se fosse o display inline. */
    margin: 5px;
}

.rodapePrincipal-patrocinadores .container{
    display: flex;
    justify-content: space-between;
}

.rodapePrincipal-patrocinadores-list{
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 70%; /*o spacebeetwen faz ocupar todo espaço da tela distribuido. Já o width
    faz ocupar 75% datela.*/
    margin-right: 5%;
}

.rodapePrincipal-contatoForm{
    width: 25%;
}

.rodapePrincipal-contatoForm-fieldset{
    display: flex; /* alinha a altura do botão enviar de acordo com elemento. */
}

.rodapePrincipal-navMap-list{
    display: flex; /* deixa 1 do lado do outro. verticalmente. */
    /* flex-direction: row é o padrão do flex. pra alinha vertical, */
    flex-direction: column;
    flex-wrap: wrap; /*quebra a coluna pra proxima apartir do tamanho. 
    se nao coube no elemento pai, ele quebra; */
    height: 265px;
}
/*
Podemos distribuir os elementos dentro do pai de diversas formas, podemos por exemplo:

Colocar todo espaço à esquerda, jogando o conteúdo para direita com justify-content: flex-end.

Colocar todo espaço à direita, jogando o conteúdo para esquerda com justify-content: flex-start (que é o padrão).

Colocar todo espaço à esquerda e à direita, jogando o conteúdo para o meio com justify-content: center.

Colocar todo espaço entre os elementos como vimos antes usando justify-content: space-between.

E uma possibilidade bem interessante também é colocar o espaço em volta dos elementos. Podemos usar o justify-content: space-around para isso.
*/
.conteudoPrincipal-cursos{
    display: flex;
    flex-wrap: wrap; /*quebra na outra linha caso nao caiba. */
}

.conteudoPrincipal-cursos-link {
	width: 23%;
	margin: 1%;
}

.conteudoPrincipal-cursos-link:nth-child(4n) {
	margin-right: 0;
}

.conteudoPrincipal-cursos-link:nth-child(4n+1) {
	margin-left: 0;
}

.videoSobre .container{
    display: flex;
}

.videoSobre-sobre{
    text-align: center;
    display: flex; /* deixa o texto alinhado ->*/
    flex-direction: column; /*deixa a direção em coluna | e deixa o botão do tamanho do texto. */
    flex-grow: 2/* se sobra tamanho, ele ocupa o tamanho e centraliza.*/
}

.videoSobre-sobre-list{
    flex-grow: 1;
}
.videoSobre-video{
    flex-grow: 1;
    flex-shrink: 2; /*faz o video diminuir 2x mais que o vantagens. */
}

/*Se colocar dois elementos filho como flex-grow:1, ele vai dividir o espaço total do elemento
pai, e coloca metade pra cada elemento filho. */

/*  MOBILE*/
@media(max-width:768px){

    .cabecalhoPrincipal-nav{
    flex-direction: column;
    }

    .cabecalhoPrincipal-nav-link-app{
        order: -1; /* inverte a ordem. */
    }

    .cabecalhoPrincipal .container{
        flex-direction: column;
        align-items: initial; /* alinha os items no meio. */
        text-align: center;
    }

    .conteudoPrincipal-curso{
        flex-direction: column;
    }

    .conteudoPrincipal-cursos-link{
        width: 100%; /*cada elemento ocupa 100% ai ele quebra pra linha de baixo. */
    }
    .rodapePrincipal-navMap-list{
        height: auto; /*Nao quebra pra linha de baixo, vai rolando. */ 
    }
    .rodapePrincipal-patrocinadores .container{
        flex-direction: column;
        align-items: center; /*Centraliza os items; */   
    }

    .rodapePrincipal-patrocinadores-list{
        margin: 0;
        width: 100%;
    }

    .rodapePrincipal-contatoForm{
        width: 100%;/*define 100% para o input. */
    }

    .rodapePrincipal-contatoForm-fieldset{
        justify-content: center; /*centraliza o form. */
    }

    .videoSobre .container{
        flex-direction: column;
        align-items: center;
    }
}